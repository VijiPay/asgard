// models/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String
  firstName        String
  lastName         String
  type             String
  status           Int      @default(1)
  countryCode      String   @map("country_code")
  createdDate      DateTime @default(now()) @map("created_date")
  lastModifiedDate DateTime @updatedAt @map("last_modified_date")

  api              ApiKey?
  profile          Profile?
  transactions     Transaction[]
  payments         Payment[]
  marketplaceItems MarketplaceItem[]
  fraudScores      FraudScore[]
  payouts          Payout[]
  paymentMethod    PaymentMethod[]
}

model Profile {
  id                   Int       @id @default(autoincrement())
  nickname             String?   @map("date_of_birth")
  address              String?
  phoneNumber          String?   @map("phone_number")
  role                 String
  loginIp              String?   @map("login_ip")
  platformId           String?   @map("platform_id")
  lastLogin            DateTime? @map("last_login")
  passwordReset        Boolean?  @map("password_reset")
  passwordResetToken   String?   @map("password_reset_token")
  phoneVerified        Boolean   @map("phone_verified")
  emailVerified        Boolean   @map("email_verified")
  passwordResetExpires DateTime? @map("password_reset_expires")
  userLocked           Boolean?  @map("user_locked")
  userLockedMessage    String?   @map("user_locked_message")
  userLockedDate       DateTime? @map("user_locked_date")
  userLockedBy         String?   @map("user_locked_by")
  authyId              Int?      @map("authy_id")
  phoneVerifyCode      String?   @map("phone_verify_code")
  phoneVerifyExpires   DateTime? @map("phone_verify_expires")
  phoneVerifyDate      DateTime? @map("phone_verify_date")
  emailVerifyCode      String?   @map("email_verify_code")
  emailVerifyExpires   DateTime? @map("email_verify_expires")
  emailVerifyDate      DateTime? @map("email_verify_date")
  organization         Json?
  business             Json?
  broker               Json?
  individual           Json?
  metadata             Json?
  tosAcceptance        Json?     @map("tos_acceptance")
  userId               Int       @unique
  user                 User      @relation(fields: [userId], references: [id])
}

model ApiKey {
  id        Int      @default(autoincrement())
  key       String
  createdAt DateTime @default(now()) @map("created_at")
  lastUsed  DateTime @updatedAt
  userId    Int      @unique

  user User @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id          Int    @default(autoincrement())
  name        String
  paymentId   String
  institution String
  userId      Int    @unique
  User        User   @relation(fields: [userId], references: [id])
}

model Transaction {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  amount       Float
  status       String
  description  String
  userId       Int
  fraudScoreId Int

  user       User         @relation(fields: [userId], references: [id])
  Payment    Payment[]
  FraudScore FraudScore[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  amount        Float
  method        String
  status        String
  userId        Int
  transactionId Int

  user        User        @relation(fields: [userId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model MarketplaceItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  price       Float
  status      String
  userId      Int

  user User @relation(fields: [userId], references: [id])
}

model FraudScore {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  score     Int
  result    String   @default("NO RECORD")
  userId    Int

  user          User         @relation(fields: [userId], references: [id])
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?
}

model Payout {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Float
  status    String
  userId    Int

  user User @relation(fields: [userId], references: [id])
}
